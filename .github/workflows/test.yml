name: Test Features

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      features: ${{ steps.changes.outputs.features }}
      features_json: ${{ steps.changes.outputs.features_json }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        timeout-minutes: 5
        continue-on-error: false

      - name: Detect changed features
        id: changes
        timeout-minutes: 5
        run: |
          # Get list of changed files
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          else
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          fi

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Extract unique feature names from changed files
          FEATURES=$(echo "$CHANGED_FILES" | grep -E '^src/[^/]+/' | cut -d'/' -f2 | sort -u | tr '\n' ' ')

          # If no features changed, test all features
          if [ -z "$FEATURES" ]; then
            FEATURES=$(ls src/ | tr '\n' ' ')
          fi

                    # Clean up feature list
          FEATURES=$(echo "$FEATURES" | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')

          # Create JSON array using a more reliable method
          if [ -n "$FEATURES" ]; then
            # Convert space-separated list to JSON array
            FEATURES_ARRAY="["
            FIRST=true
            for feature in $FEATURES; do
              if [ -n "$feature" ]; then
                if [ "$FIRST" = true ]; then
                  FEATURES_ARRAY="${FEATURES_ARRAY}\"$feature\""
                  FIRST=false
                else
                  FEATURES_ARRAY="${FEATURES_ARRAY},\"$feature\""
                fi
              fi
            done
            FEATURES_ARRAY="${FEATURES_ARRAY}]"
          else
            FEATURES_ARRAY="[]"
          fi

          # Validate JSON format
          if ! echo "$FEATURES_ARRAY" | jq empty 2>/dev/null; then
            echo "ERROR: Invalid JSON format in features array: $FEATURES_ARRAY"
            exit 1
          fi

          echo "Features to test: $FEATURES"
          echo "Features JSON array: $FEATURES_ARRAY"
          echo "features=$FEATURES" >> $GITHUB_OUTPUT
          echo "features_json=$FEATURES_ARRAY" >> $GITHUB_OUTPUT

  validate-features:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.features != ''
    strategy:
      matrix:
        feature: ${{ fromJson(needs.detect-changes.outputs.features_json) }}
    steps:
      - name: Checkout (with retry)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
        timeout-minutes: 5
        continue-on-error: true

      - name: Retry checkout if failed
        if: failure()
        uses: actions/checkout@v3  # Fallback to older version
        with:
          fetch-depth: 1
        timeout-minutes: 5
        continue-on-error: true

      - name: Manual checkout fallback
        if: failure()
        run: |
          echo "Both checkout actions failed, trying manual git clone..."
          git clone --depth=1 ${{ github.server_url }}/${{ github.repository }} .
          git checkout ${{ github.sha }}

      - name: Install dependencies
        run: |
          echo "Installing required packages..."
          sudo apt-get update -y
          sudo apt-get install -y jq curl wget
          echo "Dependencies installed successfully"

      - name: Validate feature structure
        run: |
          echo "Making validation script executable..."
          chmod +x scripts/validate-feature.sh
          echo "Running validation for feature: ${{ matrix.feature }}"
          ./scripts/validate-feature.sh ${{ matrix.feature }}

  test-features:
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-features]
    if: needs.detect-changes.outputs.features != '' && always()
    strategy:
      fail-fast: false
      matrix:
        feature: ${{ fromJson(needs.detect-changes.outputs.features_json) }}
        base-image:
          - "mcr.microsoft.com/devcontainers/base:ubuntu"
          - "mcr.microsoft.com/devcontainers/base:debian"
          - "ubuntu:22.04"
          - "debian:bullseye"

    steps:
      - name: Checkout (with retry)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
        timeout-minutes: 5
        continue-on-error: true

      - name: Retry checkout if failed
        if: failure()
        uses: actions/checkout@v3  # Fallback to older version
        with:
          fetch-depth: 1
        timeout-minutes: 5
        continue-on-error: true

      - name: Manual checkout fallback
        if: failure()
        run: |
          echo "Both checkout actions failed, trying manual git clone..."
          git clone --depth=1 ${{ github.server_url }}/${{ github.repository }} .
          git checkout ${{ github.sha }}

      - name: Setup Node.js (with retry)
        uses: actions/setup-node@v4
        with:
          node-version: "18"
        timeout-minutes: 10
        continue-on-error: true

      - name: Install Node.js fallback
        if: failure()
        run: |
          echo "Standard Node.js setup failed, installing manually..."
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
          node --version
          npm --version

      - name: Install devcontainer CLI
        run: |
          echo "Installing devcontainer CLI..."
          npm install -g @devcontainers/cli || {
            echo "npm install failed, trying alternative installation..."
            curl -fsSL https://github.com/devcontainers/cli/releases/latest/download/devcontainer-cli-linux-x64.tar.gz | tar -xz
            sudo mv devcontainer /usr/local/bin/
          }
          devcontainer --version

      - name: Test feature
        run: |
          echo "Making test script executable..."
          chmod +x scripts/test-feature.sh
          echo "Testing feature ${{ matrix.feature }} with base image ${{ matrix.base-image }}"
          ./scripts/test-feature.sh ${{ matrix.feature }} "${{ matrix.base-image }}"

  test-feature-combinations:
    runs-on: ubuntu-latest
    needs: [detect-changes, test-features]
    if: needs.detect-changes.outputs.features != '' && contains(needs.detect-changes.outputs.features, 'hello-world') && contains(needs.detect-changes.outputs.features, 'hello-universe')
    continue-on-error: true  # Make this job optional to not fail the entire workflow
    timeout-minutes: 15      # Add timeout to prevent hanging

    steps:
      - name: Check GitHub Actions service health
        run: |
          echo "Checking GitHub Actions service health..."
          curl -s https://www.githubstatus.com/api/v2/status.json | jq '.status.indicator' || echo "Unable to check GitHub status"
          sleep 5  # Brief delay to avoid immediate action failures
        continue-on-error: true

      - name: Checkout (with retry)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
        timeout-minutes: 5
        continue-on-error: true

      - name: Retry checkout if failed
        if: failure()
        uses: actions/checkout@v3  # Fallback to older version
        with:
          fetch-depth: 1
        timeout-minutes: 5
        continue-on-error: true

      - name: Manual checkout fallback
        if: failure()
        run: |
          echo "Both checkout actions failed, trying manual git clone..."
          git clone --depth=1 ${{ github.server_url }}/${{ github.repository }} .
          git checkout ${{ github.sha }}

      - name: Install Node.js and devcontainer CLI (action-free)
        run: |
          echo "Installing Node.js directly to avoid GitHub Actions infrastructure issues..."
          # Install Node.js without using actions
          curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
          sudo apt-get install -y nodejs
          node --version
          npm --version

          echo "Installing devcontainer CLI..."
          # Try npm first, then fallback to direct download
          if npm install -g @devcontainers/cli; then
            echo "devcontainer CLI installed via npm"
          else
            echo "npm install failed, trying direct download..."
            curl -fsSL https://github.com/devcontainers/cli/releases/latest/download/devcontainer-cli-linux-x64.tar.gz | tar -xz
            sudo mv devcontainer /usr/local/bin/
          fi
          devcontainer --version

      - name: Test feature combinations
        run: |
          # Backup existing devcontainer config if it exists
          if [ -f ".devcontainer/devcontainer.json" ]; then
            echo "Backing up existing devcontainer.json..."
            cp .devcontainer/devcontainer.json .devcontainer/devcontainer.json.backup
          fi

          # Copy features to .devcontainer folder temporarily for testing
          echo "Setting up temporary feature structure for testing..."
          mkdir -p .devcontainer/src
          cp -r src/hello-world .devcontainer/src/
          cp -r src/hello-universe .devcontainer/src/

          # Create temporary devcontainer.json for testing feature combinations
          echo "Creating temporary devcontainer configuration for testing..."
          cat > .devcontainer/devcontainer.json << 'EOF'
          {
            "image": "mcr.microsoft.com/devcontainers/base:ubuntu",
            "features": {
              "./src/hello-world": {
                "greeting": "Hi",
                "name": "CI"
              },
              "./src/hello-universe": {
                "scope": "galaxy",
                "language": "spanish"
              }
            }
          }
          EOF

          # Test the combination
          echo "Testing feature combinations with devcontainer CLI..."
          devcontainer up --workspace-folder .
          devcontainer exec --workspace-folder . hello-world
          devcontainer exec --workspace-folder . hello-universe

          # Cleanup: Remove temporary features and restore original config
          echo "Cleaning up temporary files..."
          rm -rf .devcontainer/src

          if [ -f ".devcontainer/devcontainer.json.backup" ]; then
            echo "Restoring original devcontainer.json..."
            mv .devcontainer/devcontainer.json.backup .devcontainer/devcontainer.json
          else
            echo "Removing temporary devcontainer.json..."
            rm .devcontainer/devcontainer.json
          fi

  security-scan:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.features != ''
    strategy:
      matrix:
        feature: ${{ fromJson(needs.detect-changes.outputs.features_json) }}

    steps:
      - name: Checkout (with retry)
        uses: actions/checkout@v4
        timeout-minutes: 5
        continue-on-error: true

      - name: Retry checkout if failed
        if: failure()
        uses: actions/checkout@v3  # Fallback to older version
        timeout-minutes: 5
        continue-on-error: true

      - name: Manual checkout fallback
        if: failure()
        run: |
          echo "Both checkout actions failed, trying manual git clone..."
          git clone --depth=1 ${{ github.server_url }}/${{ github.repository }} .
          git checkout ${{ github.sha }}

      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          scandir: "./src/${{ matrix.feature }}"
          format: gcc
          severity: warning
        continue-on-error: true

      - name: Install ShellCheck (fallback)
        if: failure()
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
          echo "Running ShellCheck manually..."
          find "./src/${{ matrix.feature }}" -name "*.sh" -exec shellcheck {} \; || true

      - name: Scan for secrets
        uses: trufflesecurity/trufflehog@v3.63.2
        with:
          path: ./src/${{ matrix.feature }}
          base: main
          head: HEAD
        continue-on-error: true

      - name: Manual secret scan (fallback)
        if: failure()
        run: |
          echo "Running manual secret scan..."
          # Basic secret patterns
          echo "Checking for potential secrets in ${{ matrix.feature }}..."
          grep -r -i -E "(password|secret|key|token|api)" "./src/${{ matrix.feature }}" || echo "No obvious secrets found"
          grep -r -E "[A-Za-z0-9]{20,}" "./src/${{ matrix.feature }}" || echo "No long strings found"

  build-features:
    runs-on: ubuntu-latest
    needs: [detect-changes, test-features]
    if: needs.detect-changes.outputs.features != '' && always()
    strategy:
      matrix:
        feature: ${{ fromJson(needs.detect-changes.outputs.features_json) }}

    steps:
      - name: Checkout (with retry)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
        timeout-minutes: 5
        continue-on-error: true

      - name: Retry checkout if failed
        if: failure()
        uses: actions/checkout@v3  # Fallback to older version
        with:
          fetch-depth: 1
        timeout-minutes: 5
        continue-on-error: true

      - name: Manual checkout fallback
        if: failure()
        run: |
          echo "Both checkout actions failed, trying manual git clone..."
          git clone --depth=1 ${{ github.server_url }}/${{ github.repository }} .
          git checkout ${{ github.sha }}

      - name: Install dependencies
        run: |
          echo "Installing required packages..."
          sudo apt-get update -y
          sudo apt-get install -y jq curl wget tar gzip
          echo "Dependencies installed successfully"

      - name: Build feature
        run: |
          echo "Making build script executable..."
          chmod +x scripts/build-feature.sh
          echo "Building feature: ${{ matrix.feature }}"
          ./scripts/build-feature.sh ${{ matrix.feature }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: feature-${{ matrix.feature }}
          path: dist/
          retention-days: 7
        continue-on-error: true

      - name: Archive artifacts fallback
        if: failure()
        run: |
          echo "Standard artifact upload failed, creating manual archive..."
          if [ -d "dist/" ]; then
            tar -czf "feature-${{ matrix.feature }}-artifacts.tar.gz" dist/
            echo "Manual archive created: feature-${{ matrix.feature }}-artifacts.tar.gz"
            ls -la *.tar.gz
          else
            echo "No dist directory found to archive"
          fi

  test-summary:
    runs-on: ubuntu-latest
    needs:
      [
        detect-changes,
        validate-features,
        test-features,
        test-feature-combinations,
        security-scan,
        build-features,
      ]
    if: always()

    steps:
      - name: Test Summary
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Features Tested" >> $GITHUB_STEP_SUMMARY
          echo "${{ needs.detect-changes.outputs.features }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Results" >> $GITHUB_STEP_SUMMARY
          echo "- Validation: ${{ needs.validate-features.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Feature Tests: ${{ needs.test-features.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Feature Combinations: ${{ needs.test-feature-combinations.result }} (optional)" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build-features.result }}" >> $GITHUB_STEP_SUMMARY

          # Set overall status (security scan is optional)
          CORE_TESTS_PASSED=true

          if [ "${{ needs.validate-features.result }}" != "success" ]; then
            CORE_TESTS_PASSED=false
          fi

          if [ "${{ needs.test-features.result }}" != "success" ]; then
            CORE_TESTS_PASSED=false
          fi

          if [ "${{ needs.build-features.result }}" != "success" ]; then
            CORE_TESTS_PASSED=false
          fi

          # Optional jobs - show warning if failed but don't fail workflow
          if [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "⚠️ Security scan had issues but workflow continues" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.test-feature-combinations.result }}" != "success" ]; then
            echo "⚠️ Feature combinations test had issues but workflow continues" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$CORE_TESTS_PASSED" = "true" ]; then
            echo "✅ All core tests passed!" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "❌ Some core tests failed!" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
