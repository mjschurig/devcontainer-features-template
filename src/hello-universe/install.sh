#!/bin/bash
set -e

# Feature options (from environment variables)
SCOPE=${SCOPE:-"universe"}
LANGUAGE=${LANGUAGE:-"english"}
INSTALL_TOOLS=${INSTALLTOOLS:-"true"}
ENABLE_ASCII_ART=${ENABLEASCIIART:-"false"}
CONFIG_FILE=${CONFIGFILE:-"/usr/local/etc/hello-universe.conf"}

echo "Starting hello-universe feature installation..."
echo "Configuration:"
echo "  Scope: $SCOPE"
echo "  Language: $LANGUAGE"
echo "  Install Tools: $INSTALL_TOOLS"
echo "  Enable ASCII Art: $ENABLE_ASCII_ART"
echo "  Config File: $CONFIG_FILE"

# Platform detection and validation
if [ -f /etc/os-release ]; then
    . /etc/os-release
    echo "Detected OS: $ID $VERSION_ID"
    
    # Validate platform support
    case "$ID" in
        ubuntu|debian)
            echo "✓ Supported platform detected"
            PACKAGE_MANAGER="apt-get"
            ;;
        alpine)
            echo "✓ Alpine Linux detected"
            PACKAGE_MANAGER="apk"
            ;;
        centos|rhel|fedora)
            echo "✓ Red Hat family detected"
            PACKAGE_MANAGER="yum"
            ;;
        *)
            echo "WARNING: Untested platform '$ID'. Proceeding with caution..."
            PACKAGE_MANAGER="apt-get"
            ;;
    esac
else
    echo "ERROR: Could not detect OS. /etc/os-release not found."
    exit 1
fi

# Architecture detection
ARCHITECTURE="$(uname -m)"
echo "Detected architecture: $ARCHITECTURE"

# Validate architecture support
case "$ARCHITECTURE" in
    x86_64|amd64)
        echo "✓ x86_64 architecture supported"
        ;;
    aarch64|arm64)
        echo "✓ ARM64 architecture supported"
        ;;
    *)
        echo "WARNING: Architecture '$ARCHITECTURE' may not be fully supported"
        ;;
esac

# Check if running as root
if [ "$(id -u)" -ne 0 ]; then
    echo "ERROR: Script must be run as root. Use sudo or run in a container as root."
    exit 1
fi

# Dependency check - verify hello-world is available if it should be
if command -v hello-world >/dev/null 2>&1; then
    echo "✓ hello-world dependency found"
else
    echo "WARNING: hello-world command not found. This feature works best with hello-world installed first."
fi

# Idempotency check
if command -v hello-universe >/dev/null 2>&1; then
    echo "hello-universe command already exists. Checking version..."
    
    if hello-universe --version 2>/dev/null | grep -q "hello-universe 1.0.0"; then
        echo "✓ hello-universe feature already installed with correct version."
        
        # Check if configuration matches
        if [ -f "$CONFIG_FILE" ]; then
            CURRENT_SCOPE=$(grep "^scope=" "$CONFIG_FILE" 2>/dev/null | cut -d'=' -f2 || echo "")
            CURRENT_LANGUAGE=$(grep "^language=" "$CONFIG_FILE" 2>/dev/null | cut -d'=' -f2 || echo "")
            
            if [ "$CURRENT_SCOPE" = "$SCOPE" ] && [ "$CURRENT_LANGUAGE" = "$LANGUAGE" ]; then
                echo "✓ Configuration matches. Skipping installation."
                exit 0
            else
                echo "Configuration differs. Updating..."
            fi
        fi
    else
        echo "Different version detected. Proceeding with installation..."
    fi
fi

# Install system dependencies if needed
echo "Installing system dependencies..."
case "$PACKAGE_MANAGER" in
    apt-get)
        apt-get update
        apt-get install -y curl jq bc figlet 2>/dev/null || echo "Some packages may not be available"
        ;;
    apk)
        apk update
        apk add curl jq bc figlet 2>/dev/null || echo "Some packages may not be available"
        ;;
    yum)
        yum update -y
        yum install -y curl jq bc figlet 2>/dev/null || echo "Some packages may not be available"
        ;;
esac

# Create configuration directory
CONFIG_DIR=$(dirname "$CONFIG_FILE")
mkdir -p "$CONFIG_DIR"

# Create configuration file
echo "Creating configuration file at $CONFIG_FILE..."
cat > "$CONFIG_FILE" << EOF
# hello-universe configuration
# Generated by dev container feature

scope=$SCOPE
language=$LANGUAGE
install_tools=$INSTALL_TOOLS
enable_ascii_art=$ENABLE_ASCII_ART
version=1.0.0
installation_date=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
EOF

# Create the main hello-universe command
INSTALL_DIR="/usr/local/bin"
SCRIPT_PATH="$INSTALL_DIR/hello-universe"

echo "Installing hello-universe command to $SCRIPT_PATH..."

cat > "$SCRIPT_PATH" << 'EOF'
#!/bin/bash

# hello-universe command generated by dev container feature
# Version: 1.0.0

CONFIG_FILE="/usr/local/etc/hello-universe.conf"

# Load configuration
if [ -f "$CONFIG_FILE" ]; then
    . "$CONFIG_FILE"
else
    echo "WARNING: Configuration file not found at $CONFIG_FILE"
    scope="universe"
    language="english"
    enable_ascii_art="false"
fi

show_help() {
    echo "hello-universe - An advanced cosmic greeting command"
    echo ""
    echo "Usage: hello-universe [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -h, --help       Show this help message"
    echo "  -v, --version    Show version information"
    echo "  -s, --scope SCOPE    Override scope (world|galaxy|universe|multiverse)"
    echo "  -l, --language LANG  Override language (english|spanish|french|german|japanese)"
    echo "  -a, --ascii      Enable ASCII art"
    echo "  -c, --config     Show current configuration"
    echo "  --tools          List available cosmic tools"
    echo ""
    echo "Examples:"
    echo "  hello-universe"
    echo "  hello-universe --scope galaxy --language spanish"
    echo "  hello-universe --ascii"
}

show_version() {
    echo "hello-universe 1.0.0"
    echo "Installed by dev container feature"
    if [ -f "$CONFIG_FILE" ]; then
        echo "Configuration: $CONFIG_FILE"
        echo "Installation date: $(grep installation_date "$CONFIG_FILE" | cut -d'=' -f2)"
    fi
}

show_config() {
    echo "Current Configuration:"
    if [ -f "$CONFIG_FILE" ]; then
        cat "$CONFIG_FILE"
    else
        echo "No configuration file found"
    fi
}

list_tools() {
    echo "Available Cosmic Tools:"
    echo ""
    if command -v cosmic-calc >/dev/null 2>&1; then
        echo "  cosmic-calc - Universal calculator"
    fi
    if command -v star-map >/dev/null 2>&1; then
        echo "  star-map - Stellar cartography tool"
    fi
    if command -v hello-world >/dev/null 2>&1; then
        echo "  hello-world - Basic greeting (dependency)"
    fi
    echo ""
    echo "Use '<tool> --help' for more information about each tool."
}

get_greeting() {
    local scope_val="$1"
    local lang_val="$2"
    
    case "$lang_val" in
        spanish)
            case "$scope_val" in
                world) echo "¡Hola, Mundo!" ;;
                galaxy) echo "¡Hola, Galaxia!" ;;
                universe) echo "¡Hola, Universo!" ;;
                multiverse) echo "¡Hola, Multiverso!" ;;
            esac
            ;;
        french)
            case "$scope_val" in
                world) echo "Bonjour, Monde!" ;;
                galaxy) echo "Bonjour, Galaxie!" ;;
                universe) echo "Bonjour, Univers!" ;;
                multiverse) echo "Bonjour, Multivers!" ;;
            esac
            ;;
        german)
            case "$scope_val" in
                world) echo "Hallo, Welt!" ;;
                galaxy) echo "Hallo, Galaxie!" ;;
                universe) echo "Hallo, Universum!" ;;
                multiverse) echo "Hallo, Multiversum!" ;;
            esac
            ;;
        japanese)
            case "$scope_val" in
                world) echo "こんにちは、世界！" ;;
                galaxy) echo "こんにちは、銀河！" ;;
                universe) echo "こんにちは、宇宙！" ;;
                multiverse) echo "こんにちは、多元宇宙！" ;;
            esac
            ;;
        *)
            case "$scope_val" in
                world) echo "Hello, World!" ;;
                galaxy) echo "Hello, Galaxy!" ;;
                universe) echo "Hello, Universe!" ;;
                multiverse) echo "Hello, Multiverse!" ;;
            esac
            ;;
    esac
}

show_ascii_art() {
    local scope_val="$1"
    
    case "$scope_val" in
        world)
            echo "    🌍"
            ;;
        galaxy)
            echo "      🌌"
            echo "   ✨  ⭐  ✨"
            echo "      🌟"
            ;;
        universe)
            echo "        🌌"
            echo "   ✨  ⭐  🌟  ⭐  ✨"
            echo "      🌍  🪐  🌙"
            echo "        🌌"
            ;;
        multiverse)
            echo "    🌌     🌌     🌌"
            echo " ✨ ⭐ 🌟 ⭐ 🌟 ⭐ ✨"
            echo "   🌍 🪐 🌙 🪐 🌍"
            echo "    🌌     🌌     🌌"
            ;;
    esac
}

# Parse command line arguments
OVERRIDE_SCOPE=""
OVERRIDE_LANGUAGE=""
OVERRIDE_ASCII=""

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            exit 0
            ;;
        -v|--version)
            show_version
            exit 0
            ;;
        -c|--config)
            show_config
            exit 0
            ;;
        --tools)
            list_tools
            exit 0
            ;;
        -s|--scope)
            OVERRIDE_SCOPE="$2"
            shift 2
            ;;
        -l|--language)
            OVERRIDE_LANGUAGE="$2"
            shift 2
            ;;
        -a|--ascii)
            OVERRIDE_ASCII="true"
            shift
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Use overrides or defaults
FINAL_SCOPE="${OVERRIDE_SCOPE:-$scope}"
FINAL_LANGUAGE="${OVERRIDE_LANGUAGE:-$language}"
FINAL_ASCII="${OVERRIDE_ASCII:-$enable_ascii_art}"

# Generate and display the greeting
GREETING=$(get_greeting "$FINAL_SCOPE" "$FINAL_LANGUAGE")

if [ "$FINAL_ASCII" = "true" ]; then
    show_ascii_art "$FINAL_SCOPE"
    echo ""
fi

echo "$GREETING"

# Show scope information
case "$FINAL_SCOPE" in
    world)
        echo "Scope: Our beautiful planet Earth 🌍"
        ;;
    galaxy)
        echo "Scope: The Milky Way galaxy with ~100 billion stars 🌌"
        ;;
    universe)
        echo "Scope: The observable universe with ~2 trillion galaxies 🌌✨"
        ;;
    multiverse)
        echo "Scope: Infinite parallel universes and dimensions 🌌∞"
        ;;
esac
EOF

chmod +x "$SCRIPT_PATH"

# Install additional tools if requested
if [ "$INSTALL_TOOLS" = "true" ]; then
    echo "Installing additional cosmic tools..."
    
    # Install cosmic-calc
    cat > "$INSTALL_DIR/cosmic-calc" << 'EOF'
#!/bin/bash
# cosmic-calc - Universal calculator with cosmic constants

show_help() {
    echo "cosmic-calc - Universal calculator with cosmic constants"
    echo ""
    echo "Usage: cosmic-calc [EXPRESSION] [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -h, --help       Show this help"
    echo "  -c, --constants  Show cosmic constants"
    echo ""
    echo "Examples:"
    echo "  cosmic-calc '2 + 2'"
    echo "  cosmic-calc 'speed_of_light * 1'"
    echo "  cosmic-calc --constants"
}

show_constants() {
    echo "Cosmic Constants:"
    echo "  speed_of_light = 299792458 (m/s)"
    echo "  planck_constant = 6.62607015e-34 (J⋅s)"
    echo "  gravitational_constant = 6.67430e-11 (m³⋅kg⁻¹⋅s⁻²)"
    echo "  hubble_constant = 70 (km/s/Mpc)"
    echo "  age_of_universe = 13.8e9 (years)"
}

if [ $# -eq 0 ]; then
    show_help
    exit 0
fi

case "$1" in
    -h|--help)
        show_help
        exit 0
        ;;
    -c|--constants)
        show_constants
        exit 0
        ;;
    *)
        # Replace constants in expression
        EXPR="$1"
        EXPR="${EXPR//speed_of_light/299792458}"
        EXPR="${EXPR//planck_constant/6.62607015e-34}"
        EXPR="${EXPR//gravitational_constant/6.67430e-11}"
        EXPR="${EXPR//hubble_constant/70}"
        EXPR="${EXPR//age_of_universe/13.8e9}"
        
        if command -v bc >/dev/null 2>&1; then
            echo "$EXPR" | bc -l
        else
            echo "Error: bc calculator not available"
            exit 1
        fi
        ;;
esac
EOF

    chmod +x "$INSTALL_DIR/cosmic-calc"
    
    # Install star-map
    cat > "$INSTALL_DIR/star-map" << 'EOF'
#!/bin/bash
# star-map - Stellar cartography tool

show_help() {
    echo "star-map - Stellar cartography tool"
    echo ""
    echo "Usage: star-map [OPTIONS]"
    echo ""
    echo "Options:"
    echo "  -h, --help       Show this help"
    echo "  -c, --constellations  Show major constellations"
    echo "  -p, --planets    Show planets in our solar system"
    echo "  -s, --stars      Show nearest stars"
}

show_constellations() {
    echo "Major Constellations:"
    echo "  ⭐ Ursa Major (Big Dipper)"
    echo "  ⭐ Orion (The Hunter)"
    echo "  ⭐ Cassiopeia (The Queen)"
    echo "  ⭐ Draco (The Dragon)"
    echo "  ⭐ Leo (The Lion)"
    echo "  ⭐ Cygnus (The Swan)"
}

show_planets() {
    echo "Solar System Planets:"
    echo "  ☀️  Sun (Star)"
    echo "  ☿  Mercury"
    echo "  ♀  Venus"
    echo "  🌍 Earth"
    echo "  ♂  Mars"
    echo "  ♃  Jupiter"
    echo "  ♄  Saturn"
    echo "  ♅  Uranus"
    echo "  ♆  Neptune"
}

show_stars() {
    echo "Nearest Stars to Earth:"
    echo "  ☀️  Sun (0.000016 ly)"
    echo "  ⭐ Proxima Centauri (4.24 ly)"
    echo "  ⭐ Alpha Centauri A (4.37 ly)"
    echo "  ⭐ Alpha Centauri B (4.37 ly)"
    echo "  ⭐ Barnard's Star (5.96 ly)"
    echo "  ⭐ Wolf 359 (7.86 ly)"
}

case "${1:-}" in
    -h|--help)
        show_help
        ;;
    -c|--constellations)
        show_constellations
        ;;
    -p|--planets)
        show_planets
        ;;
    -s|--stars)
        show_stars
        ;;
    "")
        echo "🌌 Welcome to the Star Map! 🌌"
        echo ""
        echo "Use the following options to explore:"
        echo "  --constellations  View major constellations"
        echo "  --planets         View solar system planets"
        echo "  --stars           View nearest stars"
        echo ""
        echo "Use --help for more information"
        ;;
    *)
        echo "Unknown option: $1"
        echo "Use --help for usage information"
        exit 1
        ;;
esac
EOF

    chmod +x "$INSTALL_DIR/star-map"
    
    echo "✓ Cosmic tools installed: cosmic-calc, star-map"
fi

# Verify installation
echo "Verifying installation..."

if command -v hello-universe >/dev/null 2>&1; then
    echo "✓ hello-universe command installed successfully"
    
    # Test the installation
    echo ""
    echo "Testing installation:"
    hello-universe --version
    echo ""
    hello-universe
else
    echo "ERROR: hello-universe command installation failed"
    exit 1
fi

# Set up environment for non-root user
if [ -n "$_REMOTE_USER" ] && [ "$_REMOTE_USER" != "root" ]; then
    echo "Setting up environment for user: $_REMOTE_USER"
    
    if [ -d "$_REMOTE_USER_HOME" ]; then
        PROFILE_FILE="$_REMOTE_USER_HOME/.bashrc"
        if [ -f "$PROFILE_FILE" ]; then
            echo "" >> "$PROFILE_FILE"
            echo "# hello-universe feature installed" >> "$PROFILE_FILE"
            echo "# Use 'hello-universe --help' for usage information" >> "$PROFILE_FILE"
            echo "# Use 'hello-universe --tools' to see available cosmic tools" >> "$PROFILE_FILE"
            
            chown "$_REMOTE_USER:$_REMOTE_USER" "$PROFILE_FILE"
        fi
        
        # Make config file readable by user
        if [ -f "$CONFIG_FILE" ]; then
            chmod 644 "$CONFIG_FILE"
        fi
    fi
fi

echo ""
echo "🌌 hello-universe feature installation completed successfully! 🌌"
echo ""
echo "Available commands:"
echo "  hello-universe              # Main greeting command"
if [ "$INSTALL_TOOLS" = "true" ]; then
    echo "  cosmic-calc                 # Universal calculator"
    echo "  star-map                    # Stellar cartography"
fi
echo ""
echo "Usage examples:"
echo "  hello-universe --scope galaxy --language spanish"
echo "  hello-universe --ascii"
echo "  hello-universe --tools"
if [ "$INSTALL_TOOLS" = "true" ]; then
    echo "  cosmic-calc 'speed_of_light / 1000'"
    echo "  star-map --constellations"
fi 